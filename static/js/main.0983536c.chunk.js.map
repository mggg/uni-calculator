{"version":3,"sources":["formq.js","App.js","serviceWorker.js","index.js"],"names":["FormQ","props","className","style","display","justifyContent","padding","background","undefined","percent","htmlFor","id","label","type","min","max","value","Math","round","source","onChange","e","pct","target","lang","counts","App","state","enrollment","beds","fallStudents","normalFaculty","fallFaculty","normalStaff","contractStaff","fallStaff","colleges","costPerTest","highTestPercent","lowTestPercent","semesterLength","highTestFrequency","mediumTestFrequency","updateRawVal","bind","prefill","fetch","then","res","text","data","c2","name","rows","trim","split","headers","slice","forEach","r","cols","push","indexOf","dorms","sort","a","b","setState","key","origVal","ob","this","college_index","college","textAlign","map","c","i","val","disabled","width","paddingTop","paddingBottom","marginLeft","marginRight","toFixed","toLocaleString","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0983536c.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function FormQ(props) {\n  return <form className=\"form-inline\">\n    <div className=\"form-group\" style={{display: 'flex', justifyContent: 'space-between', padding: \"7px\", background: props.percent !== undefined ? \"#80A0FA\" : \"#fff\"}}>\n      <label htmlFor={props.id}>{props.label}</label>\n      <div style={{display: 'flex'}}>\n        {props.percent !== undefined ? <div className=\"percent-block\">\n          <input\n            type=\"number\"\n            className=\"form-control percent-readout\"\n            min=\"0\"\n            max=\"100\"\n            value={Math.round(props.value / props.source * 100)}\n            onChange={e => {\n              let pct = Math.min(100, Math.max(0, e.target.value * 1));\n              props.onChange(pct / 100 * props.source);\n            }}\n          />\n          <div className=\"input-group-append\">\n            <span className=\"input-group-text\">%</span>\n          </div>\n        </div> : null}\n        <input\n          type=\"number\"\n          lang=\"en\"\n          className=\"form-control student-block\"\n          value={Math.round(props.value)}\n          onChange={e => props.onChange(e.target.value)}\n        />\n        <div className=\"input-group-append\">\n          <span className=\"input-group-text\">{props.counts}</span>\n        </div>\n      </div>\n    </div>\n  </form>\n}\n","import React from 'react';\nimport FormQ from './formq';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      enrollment: 1000,\n      beds: 1000,\n      fallStudents: 100,\n\n      normalFaculty: 100,\n      fallFaculty: 80,\n\n      normalStaff: 50,\n      contractStaff: 20,\n      fallStaff: 70,\n      colleges: [],\n\n      costPerTest: 20.00,\n      highTestPercent: 40,\n      lowTestPercent: 60,\n\n      semesterLength: 110,\n      highTestFrequency: 3,\n      mediumTestFrequency: 7\n    }\n\n    this.updateRawVal = this.updateRawVal.bind(this);\n    this.prefill = this.prefill.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"/uni-calculator/college_vals.csv\").then(res => res.text()).then((data) => {\n      let c2 = [{name: \" Prefill\" }],\n          rows = data.trim().split(\"\\n\"),\n          headers = rows[0].trim().split(\",\");\n      rows = rows.slice(1);\n\n      rows.forEach((r) => {\n        let cols = r.split(\",\");\n        // \"Name,,Quadrant,Carnegie Classification,Total enrollment,Undergraduate enrollment,Graduate enrollment,Endowment per full-time equivalent student,Dorm capacity\"\n        c2.push({\n          name: cols[headers.indexOf(\"Name\")],\n          enrollment: cols[headers.indexOf(\"Total enrollment\")] * 1,\n          dorms: cols[headers.indexOf(\"Dorm capacity\")] * 1\n        });\n      });\n      c2.sort((a, b) => {\n        return a.name > b.name ? 1 : -1;\n      });\n\n      this.setState({ colleges: c2 });\n    });\n  }\n\n  updateRawVal(key, origVal) {\n    let ob = {};\n    ob[key] = origVal;\n    this.setState(ob);\n  }\n\n  prefill(college_index) {\n    let college = this.state.colleges[college_index];\n    this.setState({\n      enrollment: college.enrollment,\n      fallStudents: college.enrollment,\n      beds: college.dorms,\n    });\n  }\n\n  render() {\n    return (<div className=\"container\">\n      <div className=\"col-sm-12\">\n        <div style={{textAlign: 'center' }}>\n          <nav className=\"navbar navbar-dark bg-primary\">\n            <h2>COVID-19 Testing Calculator</h2>\n          </nav>\n          <section>\n            <h3>Description</h3>\n            <p>This calculator provides cost estimates for university COVID testing plans.</p>\n          </section>\n          <section>\n            <h3>University</h3>\n            <select onChange={e => this.prefill(e.target.value)}>\n              {this.state.colleges.map((c, i) => {\n                return <option key={i} value={i}>\n                  {c.name}\n                </option>\n              })}\n            </select>\n          </section>\n        </div>\n\n        <div className=\"qSection\">\n          <h4>Students</h4>\n          <FormQ\n            id=\"enrollment\"\n            label=\"Normal enrollment\"\n            value={this.state.enrollment}\n            counts=\"students\"\n            onChange={val => this.updateRawVal('enrollment', val * 1)}\n          />\n          <FormQ\n            id=\"dorms\"\n            label=\"Dormitory capacity\"\n            value={this.state.beds}\n            counts=\"beds\"\n            onChange={val => this.updateRawVal('beds', val * 1)}\n          />\n          <FormQ\n            id=\"fall\"\n            label=\"Projected Fall enrollment\"\n            value={this.state.fallStudents}\n            source={this.state.enrollment}\n            counts=\"students\"\n            percent=\"%\"\n            onChange={val => this.updateRawVal('fallStudents', val * 1)}\n          />\n        </div>\n\n        <div className=\"qSection\">\n          <h4>Faculty</h4>\n          <FormQ\n            id=\"faculty\"\n            label=\"Normal faculty\"\n            value={this.state.normalFaculty}\n            counts=\"members\"\n            onChange={val => this.updateRawVal('normalFaculty', val * 1)}\n          />\n          <FormQ\n            id=\"studentfacing\"\n            label=\"Projected student-facing faculty in Fall\"\n            value={this.state.fallFaculty}\n            source={this.state.normalFaculty}\n            counts=\"members\"\n            percent=\"%\"\n            onChange={val => this.updateRawVal('fallFaculty', val * 1)}\n          />\n        </div>\n\n        <div className=\"qSection\">\n          <h4>Staff</h4>\n          <FormQ\n            id=\"staff\"\n            label=\"On-campus staff, university-employed\"\n            value={this.state.normalStaff}\n            counts=\"members\"\n            onChange={val => this.updateRawVal('normalStaff', val * 1)}\n          />\n          <FormQ\n            id=\"contract\"\n            label=\"On-campus staff, contract\"\n            value={this.state.contractStaff}\n            counts=\"members\"\n            onChange={val => this.updateRawVal('contractStaff', val * 1)}\n          />\n          <FormQ\n            id=\"projectstaff\"\n            label=\"Projected on-campus staff in Fall\"\n            value={this.state.fallStaff}\n            source={this.state.normalStaff * 1 + this.state.contractStaff * 1}\n            counts=\"members\"\n            percent=\"%\"\n            onChange={val => this.updateRawVal('fallStaff', val)}\n          />\n        </div>\n\n        <div className=\"qSection cohorts\">\n          <h4>Testing</h4>\n          <div>\n            <label>High-testing cohort</label>\n            <br/>\n            <form className=\"form-inline\" style={{display: 'inline-block'}}>\n              <div style={{display: 'flex'}}>\n                <input\n                  type=\"number\"\n                  lang=\"en\"\n                  className=\"form-control percent-readout\"\n                  value={this.state.highTestPercent}\n                  onChange={e => {\n                    this.setState({\n                      highTestPercent: e.target.value * 1\n                    })\n                  }}\n                />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">%</span>\n                </div>\n              </div>\n            </form>\n            <form className=\"form-inline\" style={{display: 'inline-block'}}>\n              <div style={{display: 'flex'}}>\n                <input\n                  type=\"number\"\n                  lang=\"en\"\n                  className=\"form-control\"\n                  value={\n                    Math.round((this.state.fallStaff * 1 + this.state.fallFaculty * 1 + this.state.fallStudents * 1)\n                    * this.state.highTestPercent\n                    / 100)\n                  }\n                  disabled=\"disabled\"\n                />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">members</span>\n                </div>\n              </div>\n            </form>\n            <form className=\"form-inline\" style={{display: 'inline-block'}}>\n              <div style={{display: 'flex'}}>\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">every</span>\n                </div>\n                <input\n                  type=\"number\"\n                  lang=\"en\"\n                  className=\"form-control\"\n                  value={this.state.highTestFrequency}\n                  onChange={e => {\n                    this.setState({\n                      highTestFrequency: e.target.value * 1\n                    })\n                  }}\n                />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">days</span>\n                </div>\n              </div>\n            </form>\n          </div>\n          <div>\n            <label>Medium-testing cohort</label>\n            <br/>\n            <form className=\"form-inline\" style={{display: 'inline-block'}}>\n              <div style={{display: 'flex'}}>\n                <input\n                  type=\"number\"\n                  lang=\"en\"\n                  className=\"form-control percent-readout\"\n                  value={100 - this.state.highTestPercent}\n                  onChange={e => {\n                    this.setState({\n                      highTestPercent: 100 - (e.target.value * 1)\n                    })\n                  }}\n                />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">%</span>\n                </div>\n              </div>\n            </form>\n            <form className=\"form-inline\" style={{display: 'inline-block'}}>\n              <div style={{display: 'flex'}}>\n                <input\n                  type=\"number\"\n                  lang=\"en\"\n                  className=\"form-control\"\n                  value={\n                    Math.round((this.state.fallStaff * 1 + this.state.fallFaculty * 1 + this.state.fallStudents * 1)\n                    * (100 - this.state.highTestPercent)\n                    / 100)\n                  }\n                  disabled=\"disabled\"\n                />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">members</span>\n                </div>\n              </div>\n            </form>\n            <form className=\"form-inline\" style={{display: 'inline-block'}}>\n              <div style={{display: 'flex'}}>\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">every</span>\n                </div>\n                <input\n                  type=\"number\"\n                  lang=\"en\"\n                  className=\"form-control\"\n                  value={this.state.mediumTestFrequency}\n                  onChange={e => {\n                    this.setState({\n                      mediumTestFrequency: e.target.value * 1\n                    })\n                  }}\n                />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">days</span>\n                </div>\n              </div>\n            </form>\n          </div>\n          <hr/>\n          <div style={{width:\"60%\", display:\"flex\", justifyContent: \"space-between\"}}>\n            Cost per test\n            <form className=\"form-inline\" style={{display: 'inline-block'}}>\n              <div style={{display: 'flex'}}>\n                <input\n                  type=\"number\"\n                  lang=\"en\"\n                  className=\"form-control\"\n                  value={this.state.costPerTest}\n                  onChange={e => {\n                    this.setState({\n                      costPerTest: e.target.value * 1\n                    })\n                  }}\n                />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">dollars</span>\n                </div>\n              </div>\n            </form>\n          </div>\n          <div style={{width:\"60%\", display:\"flex\", justifyContent: \"space-between\"}}>\n            Semester length\n            <form className=\"form-inline\" style={{display: 'inline-block'}}>\n              <div style={{display: 'flex'}}>\n                <input\n                  type=\"number\"\n                  lang=\"en\"\n                  className=\"form-control\"\n                  value={this.state.semesterLength}\n                  onChange={e => {\n                    this.setState({\n                      semesterLength: e.target.value * 1\n                    })\n                  }}\n                />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">days</span>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        <div style={{background: '#eee', textAlign: 'center', paddingTop: \"10px\", paddingBottom: \"15px\"}}>\n          <div style={{marginLeft:\"15%\", marginRight: \"15%\"}}>\n            <h4>Outcomes</h4>\n            <div style={{display: 'flex', justifyContent: 'space-between'}}>\n              Cost per person for semester (high-testing group)\n              <strong>$\n              {(this.state.costPerTest\n                  // * this.state.highTestPercent / 100\n                  // * (this.state.fallStaff + this.state.fallFaculty + this.state.fallStudents)\n                  * this.state.semesterLength / this.state.highTestFrequency\n                  // / this.state.fallStudents\n              ).toFixed(2)}\n              </strong>\n            </div>\n            <div style={{display: 'flex', justifyContent: 'space-between'}}>\n              Cost per person for semester (medium-testing group)\n              <strong>$\n              {(this.state.costPerTest\n                  // * (100 - this.state.highTestPercent) / 100\n                  // * (this.state.fallStaff + this.state.fallFaculty + this.state.fallStudents)\n                  * this.state.semesterLength / this.state.mediumTestFrequency\n                  // / this.state.fallStudents\n              ).toFixed(2)}</strong>\n            </div>\n            <div style={{display: 'flex', justifyContent: 'space-between'}}>\n              Total cost\n              <strong>$\n              {Math.round(this.state.costPerTest *\n                  (\n                    this.state.highTestPercent / 100 * this.state.semesterLength / this.state.highTestFrequency\n                    +\n                    (100 - this.state.highTestPercent) / 100 * this.state.semesterLength / this.state.mediumTestFrequency\n                  )\n                  * (this.state.fallStaff + this.state.fallFaculty + this.state.fallStudents)\n              ).toLocaleString()}</strong>\n            </div>\n          </div>\n        </div>\n        <br/>\n        <br/>\n      </div>\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}