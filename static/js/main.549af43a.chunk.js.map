{"version":3,"sources":["formq.js","scenario.js","slider.js","App.js","serviceWorker.js","index.js"],"names":["FormQ","props","className","style","display","justifyContent","paddingTop","paddingBottom","htmlFor","id","label","undefined","percent","disabled","type","min","max","value","Math","round","source","onChange","e","pct","target","lang","counts","Scenario","selected","name","onSelect","checked","headline","body","TestingSlider","step","toFixed","App","state","scenarioSelect","undergrad","grad","beds","fallStudents","fallInPerson","studentCampusFrequency","normalFaculty","fallFaculty","facultyCampusFrequency","normalStaff","fallStaff","staffCampusFrequency","contractStaff","fallContractStaff","contractCampusFrequency","colleges","costPerTest","semesterLength","highTestFrequency","mediumTestFrequency","reveal","updateRawVal","bind","prefill","preplan","fetch","then","res","text","data","c2","rows","trim","split","headers","slice","forEach","r","cols","push","indexOf","dorms","sort","a","b","setState","key","origVal","ob","this","college_index","college","plan_index","textAlign","padding","map","c","i","val","class","disableScenario","required","width","background","marginLeft","marginRight","color","fontSize","toLocaleString","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mOAEe,SAASA,EAAMC,GAC5B,OAAO,0BAAMC,UAAU,eACrB,yBAAKA,UAAU,aAAaC,MAAO,CAACC,QAAS,OAAQC,eAAgB,gBAAiBC,WAAY,MAAOC,cAAe,QACtH,2BAAOC,QAASP,EAAMQ,IAAKR,EAAMS,OACjC,yBAAKP,MAAO,CAACC,QAAS,cAEDO,IAAlBV,EAAMW,QAAwB,yBAAKV,UAAU,iBACxB,SAAnBD,EAAMY,SACL,2BACEC,KAAK,SACLZ,UAAU,+BACVa,IAAI,IACJC,IAAI,MACJC,MAAOC,KAAKC,MAAMlB,EAAMgB,MAAQhB,EAAMmB,OAAS,KAC/CC,SAAU,SAAAC,GACR,IAAIC,EAAML,KAAKH,IAAI,IAAKG,KAAKF,IAAI,EAAoB,EAAjBM,EAAEE,OAAOP,QAC7ChB,EAAMoB,SAASE,EAAM,IAAMtB,EAAMmB,WAGrC,2BACEN,KAAK,SACLZ,UAAU,+BACVa,IAAI,IACJC,IAAI,MACJC,MAAOC,KAAKC,MAAMlB,EAAMgB,MAAQhB,EAAMmB,OAAS,KAC/CC,SAAU,SAAAC,GACR,IAAIC,EAAML,KAAKH,IAAI,IAAKG,KAAKF,IAAI,EAAoB,EAAjBM,EAAEE,OAAOP,QAC7ChB,EAAMoB,SAASE,EAAM,IAAMtB,EAAMmB,SAErCP,UAAQ,IACV,yBAAKX,UAAU,sBACb,0BAAMA,UAAU,oBAAhB,OAEK,KAEW,SAAnBD,EAAMY,SACL,2BACEC,KAAK,SACLW,KAAK,KACLvB,UAAU,6BACVa,IAAI,IACJE,MAAOC,KAAKC,MAAMlB,EAAMgB,OACxBI,SAAU,SAAAC,GAAC,OAAIrB,EAAMoB,SAASC,EAAEE,OAAOP,UAEzC,2BACEH,KAAK,SACLW,KAAK,KACLvB,UAAU,6BACVa,IAAI,IACJE,MAAOC,KAAKC,MAAMlB,EAAMgB,OACxBI,SAAU,SAAAC,GAAC,OAAIrB,EAAMoB,SAASC,EAAEE,OAAOP,QACzCJ,UAAQ,IACV,yBAAKX,UAAU,sBACb,0BAAMA,UAAU,oBAAoBD,EAAMyB,YCrDrC,SAASC,EAAS1B,GAC/B,OAAO,2BAAOC,UAAW,aAAeD,EAAM2B,WAAa3B,EAAMQ,GAAK,SAAW,KAC/E,2BACEK,KAAK,QACLe,KAAK,WACLR,SAAU,SAAAC,GAAC,OAAIrB,EAAM6B,SAAS7B,EAAMQ,KACpCsB,QAAS9B,EAAM2B,WAAa3B,EAAMQ,KAEpC,gCAASR,EAAM+B,UACd/B,EAAMgC,MCTI,SAASC,EAAcjC,GACpC,OAAO,6BACL,+BAAQA,EAAMS,MAAd,0DACA,6BACA,2BACEI,KAAK,QACLC,IAAI,IACJC,IAAI,MACJmB,KAAK,IACLd,SAAUpB,EAAMoB,SAChBJ,MAAOhB,EAAMgB,QAEf,8CAA0B,IAAIhB,EAAMgB,OAAOmB,QAAQ,GAAnD,aAAiEnC,EAAMgB,MAAMmB,QAAQ,GAArF,W,UC0kBWC,E,kDAjlBb,WAAapC,GAAQ,IAAD,8BAClB,cAAMA,IAEDqC,MAAQ,CACXC,eAAgB,EAEhBC,UAAW,IACXC,KAAM,IACNC,KAAM,IACNC,aAAc,IACdC,aAAc,IACdC,uBAAwB,GAGxBC,cAAe,EACfC,YAAa,EACbC,uBAAwB,GAExBC,YAAa,EACbC,UAAW,EACXC,qBAAsB,GAEtBC,cAAe,EACfC,kBAAmB,EACnBC,wBAAyB,GAEzBC,SAAU,GAEVC,YAAa,GAEbC,eAAgB,GAChBC,kBAAmB,EACnBC,oBAAqB,EAErBC,QAAQ,GAGV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBAvCG,E,gEA0CC,IAAD,OAClBG,MAAM,oCAAoCC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAACG,GACtE,IAAIC,EAAK,CAAC,CAACzC,KAAM,YACb0C,EAAOF,EAAKG,OAAOC,MAAM,MACzBC,EAAUH,EAAK,GAAGC,OAAOC,MAAM,MACnCF,EAAOA,EAAKI,MAAM,IAEbC,SAAQ,SAACC,GACZ,IAAIC,EAAOD,EAAEJ,MAAM,KAEnBH,EAAGS,KAAK,CACNlD,KAAMiD,EAAKJ,EAAQM,QAAQ,SAC3BxC,UAA+D,EAApDsC,EAAKJ,EAAQM,QAAQ,6BAChCvC,KAAqD,EAA/CqC,EAAKJ,EAAQM,QAAQ,wBAE3BC,MAAgD,EAAzCH,EAAKJ,EAAQM,QAAQ,uBAGhCV,EAAGY,MAAK,SAACC,EAAGC,GACV,OAAOD,EAAEtD,KAAOuD,EAAEvD,KAAO,GAAK,KAGhC,EAAKwD,SAAS,CAAE9B,SAAUe,S,mCAIjBgB,EAAKC,GAChB,IAAIC,EAAK,GACTA,EAAGF,GAAOC,EACVE,KAAKJ,SAASG,K,8BAGRE,GACN,IAAIC,EAAUF,KAAKnD,MAAMiB,SAASmC,GAClCD,KAAKJ,SAAS,CACZ7C,UAAWmD,EAAQnD,UACnBC,KAAMkD,EAAQlD,KACdE,aAAcgD,EAAQnD,UAAYmD,EAAQlD,KAC1CC,KAAMiD,EAAQV,U,8BAIVW,GACW,EAAbA,IAAmB,EACrBH,KAAKJ,SAAS,CACZ9C,eAAgB,IAEI,EAAbqD,IAAmB,EAC5BH,KAAKJ,SAAS,CACZ1C,aAAyD,IAA1C8C,KAAKnD,MAAME,UAAYiD,KAAKnD,MAAMG,MACjDG,aAAyD,IAA1C6C,KAAKnD,MAAME,UAAYiD,KAAKnD,MAAMG,MAAc,GAC/DI,uBAAwB,KACxBG,uBAAwB,KACxBG,qBAAsB,GACtBE,kBAAmBnC,KAAKH,IAAI0E,KAAKnD,MAAMe,kBAAmB,KAC1DC,wBAAyB,IACzBf,eAAgB,IAEI,EAAbqD,IAAmB,EAC5BH,KAAKJ,SAAS,CACZ1C,aAAyD,IAA1C8C,KAAKnD,MAAME,UAAYiD,KAAKnD,MAAMG,MACjDG,aAAyD,IAA1C6C,KAAKnD,MAAME,UAAYiD,KAAKnD,MAAMG,MAAc,GAC/DI,uBAAwB,GACxBG,uBAAwB,GACxBG,qBAAsB,GACtBE,kBAAmBnC,KAAKH,IAAI0E,KAAKnD,MAAMe,kBAAmB,KAC1DC,wBAAyB,IACzBf,eAAgB,IAEI,EAAbqD,IAAmB,EAC5BH,KAAKJ,SAAS,CACZ1C,aAAyD,KAA1C8C,KAAKnD,MAAME,UAAYiD,KAAKnD,MAAMG,MACjDG,aAAyD,KAA1C6C,KAAKnD,MAAME,UAAYiD,KAAKnD,MAAMG,MAAe,GAChEI,uBAAwB,EAAE,EAAI,IAC9BG,uBAAwB,GAAG,GAAK,IAChCG,qBAAsB,GACtBE,kBAAmBnC,KAAKH,IAAI0E,KAAKnD,MAAMe,kBAAmB,KAC1DC,wBAAyB,IACzBf,eAAgB,IAEI,EAAbqD,IAAmB,GAC5BH,KAAKJ,SAAS,CACZ1C,aAAyD,IAA1C8C,KAAKnD,MAAME,UAAYiD,KAAKnD,MAAMG,MACjDG,aAAyD,IAA1C6C,KAAKnD,MAAME,UAAYiD,KAAKnD,MAAMG,MAAc,GAC/DI,uBAAwB,IACxBG,uBAAwB,GACxBG,qBAAsB,GACtBE,kBAAmB,EACnBC,wBAAyB,EACzBf,eAAgB,M,wCAMpB,OAAkC,IAA9BkD,KAAKnD,MAAMC,eACN,QAEA,S,+BAID,IAAD,OACP,OAAQ,yBAAKrC,UAAU,aACrB,yBAAKA,UAAU,aACb,yBAAKC,MAAO,CAAC0F,UAAW,WACtB,yBAAK3F,UAAU,iCACb,4DAGF,6BAASA,UAAU,YACjB,uBAAGC,MAAO,CAAC0F,UAAW,OAAQC,QAAS,SAAS,sLAAhD,4KAKF,6BAAS5F,UAAU,wBACjB,mEACA,0KACA,4BACE,gOACA,2MACA,6kBAEF,2BAAG,oDAAH,sOAIJ,wBAAIO,GAAG,cAEP,yBAAKP,UAAU,oBACb,0DACA,wEACA,6BACA,+EACA,6BACA,6BANF,sBAQE,4BAAQmB,SAAU,SAAAC,GAAC,OAAI,EAAKyC,QAAQzC,EAAEE,OAAOP,SAC1CwE,KAAKnD,MAAMiB,SAASwC,KAAI,SAACC,EAAGC,GAC3B,OAAO,4BAAQX,IAAKW,EAAGhF,MAAOgF,GAC3BD,EAAEnE,UAIT,6BACA,6BAGA,wCACA,kBAAC7B,EAAD,CACES,GAAG,YACHC,MAAM,2BACNO,MAAOwE,KAAKnD,MAAME,UAClBd,OAAO,WACPL,SAAU,SAAA6E,GAAG,OAAI,EAAKrC,aAAa,YAAmB,EAANqC,MAElD,kBAAClG,EAAD,CACES,GAAG,OACHC,MAAM,sBACNO,MAAOwE,KAAKnD,MAAMG,KAClBf,OAAO,WACPL,SAAU,SAAA6E,GAAG,OAAI,EAAKrC,aAAa,OAAc,EAANqC,MAE7C,kBAAClG,EAAD,CACES,GAAG,QACHC,MAAM,qBACNO,MAAOwE,KAAKnD,MAAMI,KAClBhB,OAAO,OACPL,SAAU,SAAA6E,GAAG,OAAI,EAAKrC,aAAa,OAAc,EAANqC,OAI/C,yBAAKhG,UAAU,oBACb,6BACA,wEACA,6BAAK,6BAEL,uCACA,kBAACF,EAAD,CACES,GAAG,UACHC,MAAM,iBACNO,MAAOwE,KAAKnD,MAAMQ,cAClBpB,OAAO,UACPL,SAAU,SAAA6E,GAAG,OAAI,EAAKrC,aAAa,gBAAuB,EAANqC,OAIxD,yBAAKhG,UAAU,oBACb,qCACA,kBAACF,EAAD,CACES,GAAG,QACHC,MAAM,uCACNO,MAAOwE,KAAKnD,MAAMW,YAClBvB,OAAO,UACPL,SAAU,SAAA6E,GAAG,OAAI,EAAKrC,aAAa,cAAqB,EAANqC,MAEpD,kBAAClG,EAAD,CACES,GAAG,WACHC,MAAM,4BACNO,MAAOwE,KAAKnD,MAAMc,cAClB1B,OAAO,UACPL,SAAU,SAAA6E,GAAG,OAAI,EAAKrC,aAAa,gBAAuB,EAANqC,OAIxD,wBAAIzF,GAAG,cAEP,yBAAKP,UAAU,YACb,iCACE,yCACA,iLAEA,gbAMA,kBAACyB,EAAD,CACElB,GAAI,EACJmB,SAAU6D,KAAKnD,MAAMC,eACrBT,SAAU2D,KAAKzB,QACfhC,SAAS,yCACTC,KAAK,oOAGP,kBAACN,EAAD,CACElB,GAAI,EACJmB,SAAU6D,KAAKnD,MAAMC,eACrBT,SAAU2D,KAAKzB,QACfhC,SAAS,wCACTC,KAAK,+GAGP,kBAACN,EAAD,CACElB,GAAI,EACJmB,SAAU6D,KAAKnD,MAAMC,eACrBT,SAAU2D,KAAKzB,QACfhC,SAAS,8CACTC,KAAK,4XAGP,kBAACN,EAAD,CACElB,GAAI,EACJmB,SAAU6D,KAAKnD,MAAMC,eACrBT,SAAU2D,KAAKzB,QACfhC,SAAS,6EACTC,KAAK,uMAGP,kBAACN,EAAD,CACElB,GAAI,EACJmB,SAAU6D,KAAKnD,MAAMC,eACrBT,SAAU2D,KAAKzB,QACfhC,SAAS,0BACTC,KAAK,OAKX,6BAEA,yBAAKkE,MAAM,WAAWhG,MAAO,CAACC,SAAUqF,KAAKnD,MAAMC,eAAiB,WAClE,gEACA,6BACA,6BAEA,kBAACvC,EAAD,CACES,GAAG,OACHC,MAAM,uCACNO,MAAOwE,KAAKnD,MAAMK,aAClBvB,OAAQqE,KAAKnD,MAAME,UAAYiD,KAAKnD,MAAMG,KAC1Cf,OAAO,WACPd,QAAQ,IACRS,SAAU,SAAA6E,GAAG,OAAI,EAAKrC,aAAa,eAAsB,EAANqC,MAErD,kBAAClG,EAAD,CACES,GAAG,OACHC,MAAM,sCACNO,MAAOwE,KAAKnD,MAAMM,aAClBxB,OAAQqE,KAAKnD,MAAMK,aACnBjB,OAAO,WACPd,QAAQ,IACRC,SAAU4E,KAAKW,kBACf/E,SAAU,SAAA6E,GAAG,OAAI,EAAKrC,aAAa,eAAsB,EAANqC,MAGrD,kBAAChE,EAAD,CACExB,MAAM,iCACNO,MAAOwE,KAAKnD,MAAMO,uBAClBxB,SAAU,SAAAC,GAAC,OAAI,EAAK+D,SAAS,CAAExC,uBAAyC,EAAjBvB,EAAEE,OAAOP,WAGlE,6BAEA,kBAACjB,EAAD,CACES,GAAG,gBACHC,MAAM,iDACNO,MAAOwE,KAAKnD,MAAMS,YAClB3B,OAAQqE,KAAKnD,MAAMQ,cACnBpB,OAAO,UACPd,QAAQ,IACRC,SAAU4E,KAAKW,kBACf/E,SAAU,SAAA6E,GAAG,OAAI,EAAKrC,aAAa,cAAqB,EAANqC,MAEpD,kBAAChE,EAAD,CACExB,MAAM,iCACNO,MAAOwE,KAAKnD,MAAMU,uBAClB3B,SAAU,SAAAC,GAAC,OAAI,EAAK+D,SAAS,CAAErC,uBAAyC,EAAjB1B,EAAEE,OAAOP,WAGlE,6BAEA,kBAACjB,EAAD,CACES,GAAG,eACHC,MAAM,qDACNO,MAAOwE,KAAKnD,MAAMY,UAClB9B,OAAiC,EAAzBqE,KAAKnD,MAAMW,YACnBvB,OAAO,UACPd,QAAQ,IACRC,SAAU4E,KAAKW,kBACf/E,SAAU,SAAA6E,GAAG,OAAI,EAAKrC,aAAa,YAAaqC,MAElD,kBAAChE,EAAD,CACExB,MAAM,+BACNO,MAAOwE,KAAKnD,MAAMa,qBAClB9B,SAAU,SAAAC,GAAC,OAAI,EAAK+D,SAAS,CAAElC,qBAAuC,EAAjB7B,EAAEE,OAAOP,WAGhE,6BAEA,kBAACjB,EAAD,CACES,GAAG,gBACHC,MAAM,0CACNO,MAAOwE,KAAKnD,MAAMe,kBAClBjC,OAAmC,EAA3BqE,KAAKnD,MAAMc,cACnB1B,OAAO,UACPd,QAAQ,IACRS,SAAU,SAAA6E,GAAG,OAAI,EAAKrC,aAAa,oBAAqBqC,OAI5D,wBAAIzF,GAAG,cAEP,yBAAKP,UAAU,oBACb,uCADF,gCAGE,6BACE,sDACA,6BACA,0BAAMA,UAAU,cAAcC,MAAO,CAACC,QAAS,iBAC7C,yBAAKD,MAAO,CAACC,QAAS,SACpB,2BACEU,KAAK,SACLW,KAAK,KACLvB,UAAU,eACVa,IAAI,IACJE,MACEC,KAAKC,OACHsE,KAAKnD,MAAMM,aAAe6C,KAAKnD,MAAMO,uBACnC4C,KAAKnD,MAAMS,YAAc0C,KAAKnD,MAAMU,uBACpCyC,KAAKnD,MAAMY,UAAYuC,KAAKnD,MAAMa,qBAClCsC,KAAKnD,MAAMe,kBAAoBoC,KAAKnD,MAAMgB,yBAC1C,KAENzC,SAAS,WACTwF,UAAQ,IAEV,yBAAKnG,UAAU,sBACb,0BAAMA,UAAU,oBAAhB,cAIN,0BAAMA,UAAU,cAAcC,MAAO,CAACC,QAAS,iBAC7C,yBAAKD,MAAO,CAACC,QAAS,SACpB,yBAAKF,UAAU,uBACb,0BAAMA,UAAU,oBAAhB,UAEF,2BACEY,KAAK,SACLZ,UAAU,eACVa,IAAI,IACJoB,KAAK,OACLlB,MAAOwE,KAAKnD,MAAMoB,kBAClBrC,SAAU,SAAAC,GACR,EAAK+D,SAAS,CACZ3B,kBAAmBpC,EAAEE,OAAOP,SAGlCoF,UAAQ,IACR,yBAAKnG,UAAU,sBACb,0BAAMA,UAAU,oBAAhB,YAKR,6BACE,wDACA,6BACA,0BAAMA,UAAU,cAAcC,MAAO,CAACC,QAAS,iBAC7C,yBAAKD,MAAO,CAACC,QAAS,SACpB,2BACEU,KAAK,SACLW,KAAK,KACLvB,UAAU,eACVa,IAAI,IACJE,MACEC,KAAKC,OACHsE,KAAKnD,MAAMM,cAAgB,IAAM6C,KAAKnD,MAAMO,wBAC1C4C,KAAKnD,MAAMS,aAAe,IAAM0C,KAAKnD,MAAMU,wBAC3CyC,KAAKnD,MAAMY,WAAa,IAAMuC,KAAKnD,MAAMa,sBACzCsC,KAAKnD,MAAMe,mBAAqB,IAAMoC,KAAKnD,MAAMgB,0BACjD,KAENzC,SAAS,WACTwF,UAAQ,IAEV,yBAAKnG,UAAU,sBACb,0BAAMA,UAAU,oBAAhB,cAIN,0BAAMA,UAAU,cAAcC,MAAO,CAACC,QAAS,iBAC7C,yBAAKD,MAAO,CAACC,QAAS,SACpB,yBAAKF,UAAU,uBACb,0BAAMA,UAAU,oBAAhB,UAEF,2BACEY,KAAK,SACLZ,UAAU,eACVa,IAAI,IACJoB,KAAK,MACLlB,MAAOwE,KAAKnD,MAAMqB,oBAClBtC,SAAU,SAAAC,GACR,EAAK+D,SAAS,CACZ1B,oBAAqBrC,EAAEE,OAAOP,SAGpCoF,UAAQ,IACR,yBAAKnG,UAAU,sBACb,0BAAMA,UAAU,oBAAhB,YAKR,6BACA,yBAAKC,MAAO,CAACmG,MAAM,MAAOlG,QAAQ,OAAQC,eAAgB,kBAA1D,gBAEE,0BAAMH,UAAU,cAAcC,MAAO,CAACC,QAAS,iBAC7C,yBAAKD,MAAO,CAACC,QAAS,SACpB,2BACEU,KAAK,SACLW,KAAK,KACLvB,UAAU,eACVa,IAAI,IACJoB,KAAK,MACLlB,MAAOwE,KAAKnD,MAAMkB,YAClBnC,SAAU,SAAAC,GACR,EAAK+D,SAAS,CACZ7B,YAA8B,EAAjBlC,EAAEE,OAAOP,SAG1BoF,UAAQ,IAEV,yBAAKnG,UAAU,sBACb,0BAAMA,UAAU,oBAAhB,eAKR,yBAAKC,MAAO,CAACmG,MAAM,MAAOlG,QAAQ,OAAQC,eAAgB,kBAA1D,kBAEE,0BAAMH,UAAU,cAAcC,MAAO,CAACC,QAAS,iBAC7C,yBAAKD,MAAO,CAACC,QAAS,SACpB,2BACEU,KAAK,SACLW,KAAK,KACLV,IAAI,IACJb,UAAU,eACVe,MAAOwE,KAAKnD,MAAMmB,eAClBpC,SAAU,SAAAC,GACR,EAAK+D,SAAS,CACZ5B,eAAiC,EAAjBnC,EAAEE,OAAOP,SAG7BoF,UAAQ,IAEV,yBAAKnG,UAAU,sBACb,0BAAMA,UAAU,oBAAhB,aAOV,yBAAKC,MAAO,CAACoG,WAAY,OAAQV,UAAW,SAAUvF,WAAY,OAAQC,cAAe,SACtFkF,KAAKnD,MAAMsB,OACR,yBAAKzD,MAAO,CAACqG,WAAW,MAAOC,YAAa,QAC5C,wCACA,yBAAKtG,MAAO,CAACuG,MAAO,QACjB,CAAC,iBAAkB,oBAAqB,cAAe,sBAAuB,YAAa,cAAe,eAAgB,gBAAgBX,KAAI,SAACT,GAC9I,OAA0B,EAAlB,EAAKhD,MAAMgD,GAAY,KAAO,0BAA4BA,MAGtE,yBAAKnF,MAAO,CAACC,QAAS,OAAQC,eAAgB,kBAA9C,oDAEE,qCACEoF,KAAKnD,MAAMkB,YACPiC,KAAKnD,MAAMmB,eAAiBgC,KAAKnD,MAAMoB,mBAC3CtB,QAAQ,KAGZ,yBAAKjC,MAAO,CAACC,QAAS,OAAQC,eAAgB,kBAA9C,sDAEE,qCACEoF,KAAKnD,MAAMkB,YACPiC,KAAKnD,MAAMmB,eAAiBgC,KAAKnD,MAAMqB,qBAC3CvB,QAAQ,KAEZ,yBAAKjC,MAAO,CAACC,QAAS,OAAQC,eAAgB,gBAAiBsG,SAAU,QAAzE,aAEE,oCACCzF,KAAKC,MAAMsE,KAAKnD,MAAMkB,YAAciC,KAAKnD,MAAMmB,eAAiB,MAE7DgC,KAAKnD,MAAMM,cAAgB,IAAM6C,KAAKnD,MAAMO,wBAC5C4C,KAAKnD,MAAMS,aAAe,IAAM0C,KAAKnD,MAAMU,wBAC3CyC,KAAKnD,MAAMY,WAAa,IAAMuC,KAAKnD,MAAMa,sBACzCsC,KAAKnD,MAAMe,mBAAqB,IAAMoC,KAAKnD,MAAMgB,0BACjDmC,KAAKnD,MAAMqB,qBAIX8B,KAAKnD,MAAMM,aAAe6C,KAAKnD,MAAMO,uBACrC4C,KAAKnD,MAAMS,YAAc0C,KAAKnD,MAAMU,uBACpCyC,KAAKnD,MAAMY,UAAYuC,KAAKnD,MAAMa,qBAClCsC,KAAKnD,MAAMe,kBAAoBoC,KAAKnD,MAAMgB,yBAC1CmC,KAAKnD,MAAMoB,oBACZkD,oBAGP,4BAAQ1G,UAAU,yBAAyB2G,QAAS,SAAAvF,GAAC,OAAI,EAAK+D,SAAS,CAAEzB,QAAQ,MAAjF,mBAGJ,6BACA,mC,GA5kBUkD,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.549af43a.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function FormQ(props) {\n  return <form className=\"form-inline\">\n    <div className=\"form-group\" style={{display: 'flex', justifyContent: 'space-between', paddingTop: \"7px\", paddingBottom: \"7px\"}}>\n      <label htmlFor={props.id}>{props.label}</label>\n      <div style={{display: 'flex'}}>\n\n        {props.percent !== undefined ? <div className=\"percent-block\">\n          {props.disabled !== \"true\" ?\n            <input\n              type=\"number\"\n              className=\"form-control percent-readout\"\n              min=\"0\"\n              max=\"100\"\n              value={Math.round(props.value / props.source * 100)}\n              onChange={e => {\n                let pct = Math.min(100, Math.max(0, e.target.value * 1));\n                props.onChange(pct / 100 * props.source);\n              }}\n            />\n          : <input\n              type=\"number\"\n              className=\"form-control percent-readout\"\n              min=\"0\"\n              max=\"100\"\n              value={Math.round(props.value / props.source * 100)}\n              onChange={e => {\n                let pct = Math.min(100, Math.max(0, e.target.value * 1));\n                props.onChange(pct / 100 * props.source);\n              }}\n            disabled/>}\n          <div className=\"input-group-append\">\n            <span className=\"input-group-text\">%</span>\n          </div>\n        </div> : null}\n\n        {props.disabled !== \"true\" ?\n          <input\n            type=\"number\"\n            lang=\"en\"\n            className=\"form-control student-block\"\n            min=\"0\"\n            value={Math.round(props.value)}\n            onChange={e => props.onChange(e.target.value)}\n          />\n        : <input\n            type=\"number\"\n            lang=\"en\"\n            className=\"form-control student-block\"\n            min=\"0\"\n            value={Math.round(props.value)}\n            onChange={e => props.onChange(e.target.value)} \n          disabled/>}\n        <div className=\"input-group-append\">\n          <span className=\"input-group-text\">{props.counts}</span>\n        </div>\n\n      </div>\n    </div>\n  </form>\n}\n","import React from 'react'\n\nexport default function Scenario(props) {\n  return <label className={\"scenario \" + (props.selected === props.id ? \"select\" : \"\")}>\n    <input\n      type=\"radio\"\n      name=\"scenario\"\n      onChange={e => props.onSelect(props.id)}\n      checked={props.selected === props.id}\n    />\n    <strong>{props.headline}</strong>\n    {props.body}\n  </label>\n}\n","import React from 'react'\n\nexport default function TestingSlider(props) {\n  return <div>\n    <label>{props.label}: 1-2/week (medium testing) vs. 3+/week (high testing)</label>\n    <br/>\n    <input\n      type=\"range\"\n      min=\"0\"\n      max=\"100\"\n      step=\"1\"\n      onChange={props.onChange}\n      value={props.value}\n    />\n    <span>&nbsp;&nbsp;&nbsp;{(100-props.value).toFixed(1)}% medium, {props.value.toFixed(1)}% high</span>\n  </div>\n}\n","import React from 'react';\nimport FormQ from './formq';\nimport Scenario from './scenario';\nimport TestingSlider from './slider';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      scenarioSelect: 0, // 0 = make-your-own\n\n      undergrad: 800,\n      grad: 200,\n      beds: 1000,\n      fallStudents: 800, // count of students who re-enrolled\n      fallInPerson: 800, // count of students coming in weekly\n      studentCampusFrequency: 50,\n\n\n      normalFaculty: 0, // count of normal faculty\n      fallFaculty: 0, // count of fall faculty (appearing weekly or more)\n      facultyCampusFrequency: 50, // this is a %\n\n      normalStaff: 0,\n      fallStaff: 0,\n      staffCampusFrequency: 50, // %\n\n      contractStaff: 0,\n      fallContractStaff: 0,\n      contractCampusFrequency: 50, // %\n\n      colleges: [],\n\n      costPerTest: 25.00,\n\n      semesterLength: 80,\n      highTestFrequency: 3, // this can be a decimal; every N days\n      mediumTestFrequency: 7, // this can be a decmimal; every N days\n\n      reveal: false\n    }\n\n    this.updateRawVal = this.updateRawVal.bind(this);\n    this.prefill = this.prefill.bind(this);\n    this.preplan = this.preplan.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"/uni-calculator/college_vals.csv\").then(res => res.text()).then((data) => {\n      let c2 = [{name: \" Select\" }],\n          rows = data.trim().split(\"\\n\"),\n          headers = rows[0].trim().split(\",\");\n      rows = rows.slice(1);\n\n      rows.forEach((r) => {\n        let cols = r.split(\",\");\n        // \"Name,,Quadrant,Carnegie Classification,Total enrollment,Undergraduate enrollment,Graduate enrollment,Endowment per full-time equivalent student,Dorm capacity\"\n        c2.push({\n          name: cols[headers.indexOf(\"Name\")],\n          undergrad: cols[headers.indexOf(\"Undergraduate enrollment\")] * 1,\n          grad: cols[headers.indexOf(\"Graduate enrollment\")] * 1,\n          // enrollment: cols[headers.indexOf(\"Total enrollment\")] * 1,\n          dorms: cols[headers.indexOf(\"Dorm capacity\")] * 1\n        });\n      });\n      c2.sort((a, b) => {\n        return a.name > b.name ? 1 : -1;\n      });\n\n      this.setState({ colleges: c2 });\n    });\n  }\n\n  updateRawVal(key, origVal) {\n    let ob = {};\n    ob[key] = origVal;\n    this.setState(ob);\n  }\n\n  prefill(college_index) {\n    let college = this.state.colleges[college_index];\n    this.setState({\n      undergrad: college.undergrad,\n      grad: college.grad,\n      fallStudents: college.undergrad + college.grad,\n      beds: college.dorms,\n    });\n  }\n\n  preplan(plan_index) {\n    if (plan_index * 1 === 0) {\n      this.setState({\n        scenarioSelect: 0\n      });\n    } else if (plan_index * 1 === 1) {\n      this.setState({\n        fallStudents: (this.state.undergrad + this.state.grad) * 0.7,\n        fallInPerson: (this.state.undergrad + this.state.grad) * 0.7 * 0.8,\n        studentCampusFrequency: 7/8 * 100,\n        facultyCampusFrequency: 5/8 * 100,\n        staffCampusFrequency: 50,\n        fallContractStaff: Math.min(this.state.fallContractStaff, 250),\n        contractCampusFrequency: 100,\n        scenarioSelect: 1\n      });\n    } else if (plan_index * 1 === 2) {\n      this.setState({\n        fallStudents: (this.state.undergrad + this.state.grad) * 0.4,\n        fallInPerson: (this.state.undergrad + this.state.grad) * 0.4 * 0.9,\n        studentCampusFrequency: 50,\n        facultyCampusFrequency: 50,\n        staffCampusFrequency: 80,\n        fallContractStaff: Math.min(this.state.fallContractStaff, 250),\n        contractCampusFrequency: 100,\n        scenarioSelect: 2\n      });\n    } else if (plan_index * 1 === 3) {\n      this.setState({\n        fallStudents: (this.state.undergrad + this.state.grad) * 0.85,\n        fallInPerson: (this.state.undergrad + this.state.grad) * 0.85 * 0.9,\n        studentCampusFrequency: 8/9 * 100,\n        facultyCampusFrequency: 16/65 * 100,\n        staffCampusFrequency: 25,\n        fallContractStaff: Math.min(this.state.fallContractStaff, 150),\n        contractCampusFrequency: 100,\n        scenarioSelect: 3\n      });\n    } else if (plan_index * 1 === 4) {\n      this.setState({\n        fallStudents: (this.state.undergrad + this.state.grad) * 0.9,\n        fallInPerson: (this.state.undergrad + this.state.grad) * 0.9 * 0.5,\n        studentCampusFrequency: 100,\n        facultyCampusFrequency: 80,\n        staffCampusFrequency: 60,\n        fallContractStaff: 0,\n        contractCampusFrequency: 0,\n        scenarioSelect: 4\n      });\n    }\n  }\n\n  disableScenario() {\n    if (this.state.scenarioSelect === 0) {\n      return \"false\"\n    } else {\n      return \"true\"\n    }\n  }\n\n  render() {\n    return (<div className=\"container\">\n      <div className=\"col-sm-12\">\n        <div style={{textAlign: 'center' }}>\n          <nav className=\"navbar navbar-dark bg-primary\">\n            <h2>COVID-19 Testing Calculator</h2>\n          </nav>\n\n          <section className=\"qSection\">\n            <p style={{textAlign: 'left', padding: '10px'}}><strong>This is a scenario-building tool to help university leadership arrive at plans for COVID testing cohorts and\n            frequency for the Fall 2020 semester.</strong>  Its intention is to help universities plan a bulk testing commitment in June,\n            such as (but not exclusively) the testing service to be offered by the Broad Institute.</p>\n          </section>\n\n          <section className=\"qSection suggestions\">\n            <h4>Summary of modeling recommendations</h4>\n            <p>Here&rsquo;s a quick review of suggested frequency for surveillance testing with isolation strategy, without assumptions on contact tracing.</p>\n            <ul>\n              <li>Rochelle Walensky’s team (Harvard Med) recommends Q3 (that is, every three days) testing in order to keep the total number of infections minimized while keeping costs in reasonable range.</li>\n              <li>Peter Frazier’s group (Cornell operations research) recommends Q5 testing but does not consider exogenous shocks, may increase frequency when that parameter is added.</li>\n              <li>The IDSS COVID Collaboration (contact: Peko Hosoi at MIT) finds that Q12 testing suffices for stability (i.e., to prevent exponential outbreak within campus) with R0 = 2 and 100% sensitivity, but this finding does not take into account total number of infections, only rate of growth. By contrast, R0 = 2.5 and 70% sensitivity leads to recommendation of Q5.6, still only taking growth rate into account. The group’s survey of SIR/MCMC/network models indicates that Q12 testing could result in over half of campus infected, while Q3 is likely under 1%.</li>\n            </ul>\n            <p><strong>The bottom line:</strong> a strategy where every individual is tested twice weekly would be in line with all available credible models. A weekly strategy is still extremely helpful for maintaining a steady and tolerably low infection rate on campus.</p>\n          </section>\n        </div>\n\n        <hr id=\"separator\"></hr>\n\n        <div className=\"qSection prefill\">\n          <h3>Load data for a university</h3>\n          <small>Source: HIFLD Open GeoData, 2017-2018</small>\n          <br/>\n          <small>One university may include multiple campuses</small>\n          <br/>\n          <br/>\n          University &nbsp;&nbsp;\n          <select onChange={e => this.prefill(e.target.value)}>\n            {this.state.colleges.map((c, i) => {\n              return <option key={i} value={i}>\n                {c.name}\n              </option>\n            })}\n          </select>\n          <br/>\n          <br/>\n\n\n          <h4>Students</h4>\n          <FormQ\n            id=\"undergrad\"\n            label=\"Undergraduate enrollment\"\n            value={this.state.undergrad}\n            counts=\"students\"\n            onChange={val => this.updateRawVal('undergrad', val * 1)}\n          />\n          <FormQ\n            id=\"grad\"\n            label=\"Graduate enrollment\"\n            value={this.state.grad}\n            counts=\"students\"\n            onChange={val => this.updateRawVal('grad', val * 1)}\n          />\n          <FormQ\n            id=\"dorms\"\n            label=\"Dormitory capacity\"\n            value={this.state.beds}\n            counts=\"beds\"\n            onChange={val => this.updateRawVal('beds', val * 1)}\n          />\n        </div>\n\n        <div className=\"qSection prefill\">\n          <br/>\n          <strong>Provide numbers of faculty and staff</strong>\n          <br/><br/>\n\n          <h4>Faculty</h4>\n          <FormQ\n            id=\"faculty\"\n            label=\"Normal faculty\"\n            value={this.state.normalFaculty}\n            counts=\"members\"\n            onChange={val => this.updateRawVal('normalFaculty', val * 1)}\n          />\n        </div>\n\n        <div className=\"qSection prefill\">\n          <h4>Staff</h4>\n          <FormQ\n            id=\"staff\"\n            label=\"On-campus staff, university-employed\"\n            value={this.state.normalStaff}\n            counts=\"members\"\n            onChange={val => this.updateRawVal('normalStaff', val * 1)}\n          />\n          <FormQ\n            id=\"contract\"\n            label=\"On-campus staff, contract\"\n            value={this.state.contractStaff}\n            counts=\"members\"\n            onChange={val => this.updateRawVal('contractStaff', val * 1)}\n          />\n        </div>\n\n        <hr id=\"separator\"></hr>\n\n        <div className=\"qSection\">\n          <section>\n            <h3>Scenarios</h3>\n            <p>All parameters will be customizable below, but we begin with the assumption of\n            an 80-day semester, which is a working hypothesis for many schools.</p>\n            <p>We will build a HIGH testing cohort (those coming to campus at least 3 days per week)\n            and a MEDIUM testing cohort (those coming to campus 1-2 days per week).\n            Other testing should be handled by a LOW testing cohort which includes some occasional\n            and some ad hoc testing, but we leave that out of this calculation because bulk\n            testing options will probably not be available for low-testing/ad hoc group.</p>\n\n            <Scenario\n              id={1}\n              selected={this.state.scenarioSelect}\n              onSelect={this.preplan}\n              headline=\"A large highly residential university.\"\n              body=\"The student life is very campus-centric and there are a large number of grant-funded research labs that need staffing.  A large number of students are from overseas and are unlikely to be able to return to campus in person.\"\n            />\n\n            <Scenario\n              id={2}\n              selected={this.state.scenarioSelect}\n              onSelect={this.preplan}\n              headline=\"A large, less-residential university.\"\n              body=\"In normal times, many students commute.  Larger number of part-time and adjunct-style instructional staff.\"\n            />\n\n            <Scenario\n              id={3}\n              selected={this.state.scenarioSelect}\n              onSelect={this.preplan}\n              headline=\"A medium university with graduate programs.\"\n              body=\"This campus has a very limited number of adjunct-style instructional faculty. However, a substantial share of the tenure-stream faculty are electing for either all-virtual instruction or for hybrid teaching with one day per week on campus. The campus-employed staff can mostly work from home, and only a small number of staff are deemed essential for lab research operations.\"\n            />\n\n            <Scenario\n              id={4}\n              selected={this.state.scenarioSelect}\n              onSelect={this.preplan}\n              headline=\"A small college with very high residency rate and limited dormitory space,\"\n              body=\"so no feasible options for de-densification at full residency. A decision has been made to limit campus residency to first- and fourth-years, with all second- and third-years studying virtually.\"\n            />\n\n            <Scenario\n              id={0}\n              selected={this.state.scenarioSelect}\n              onSelect={this.preplan}\n              headline=\"Build Your Own Scenario\"\n              body=\"\"\n            />\n          </section>\n        </div>\n\n        <br/>\n\n        <div class=\"qSection\" style={{display: (this.state.scenarioSelect ? \"block\" : \"block\")}}>\n          <strong>In-depth parameter selection</strong>\n          <br/>\n          <br/>\n\n          <FormQ\n            id=\"fall\"\n            label=\"Projected student enrollment in fall\"\n            value={this.state.fallStudents}\n            source={this.state.undergrad + this.state.grad}\n            counts=\"students\"\n            percent=\"%\"\n            onChange={val => this.updateRawVal('fallStudents', val * 1)}\n          />\n          <FormQ\n            id=\"fall\"\n            label=\"Projected weekly on-campus students\"\n            value={this.state.fallInPerson}\n            source={this.state.fallStudents}\n            counts=\"students\"\n            percent=\"%\"\n            disabled={this.disableScenario()}\n            onChange={val => this.updateRawVal('fallInPerson', val * 1)}\n          />\n\n          <TestingSlider\n            label=\"Student campus-visit frequency\"\n            value={this.state.studentCampusFrequency}\n            onChange={e => this.setState({ studentCampusFrequency: e.target.value * 1 })}\n          />\n\n          <hr/>\n\n          <FormQ\n            id=\"studentfacing\"\n            label=\"Tenure-stream faculty on campus weekly in Fall\"\n            value={this.state.fallFaculty}\n            source={this.state.normalFaculty}\n            counts=\"members\"\n            percent=\"%\"\n            disabled={this.disableScenario()}\n            onChange={val => this.updateRawVal('fallFaculty', val * 1)}\n          />\n          <TestingSlider\n            label=\"Faculty campus-visit frequency\"\n            value={this.state.facultyCampusFrequency}\n            onChange={e => this.setState({ facultyCampusFrequency: e.target.value * 1 })}\n          />\n\n          <hr/>\n\n          <FormQ\n            id=\"projectstaff\"\n            label=\"University-employed staff on campus weekly in Fall\"\n            value={this.state.fallStaff}\n            source={this.state.normalStaff * 1}\n            counts=\"members\"\n            percent=\"%\"\n            disabled={this.disableScenario()}\n            onChange={val => this.updateRawVal('fallStaff', val)}\n          />\n          <TestingSlider\n            label=\"Staff campus-visit frequency\"\n            value={this.state.staffCampusFrequency}\n            onChange={e => this.setState({ staffCampusFrequency: e.target.value * 1 })}\n          />\n\n          <hr/>\n\n          <FormQ\n            id=\"contractstaff\"\n            label=\"Contract staff on campus weekly in Fall\"\n            value={this.state.fallContractStaff}\n            source={this.state.contractStaff * 1}\n            counts=\"members\"\n            percent=\"%\"\n            onChange={val => this.updateRawVal('fallContractStaff', val)}\n          />\n        </div>\n\n        <hr id=\"separator\"></hr>\n\n        <div className=\"qSection cohorts\">\n          <h4>Testing</h4>\n          When all groups are combined,\n          <div>\n            <label>High-testing cohort</label>\n            <br/>\n            <form className=\"form-inline\" style={{display: 'inline-block'}}>\n              <div style={{display: 'flex'}}>\n                <input\n                  type=\"number\"\n                  lang=\"en\"\n                  className=\"form-control\"\n                  min=\"0\"\n                  value={\n                    Math.round((\n                      this.state.fallInPerson * this.state.studentCampusFrequency\n                      + this.state.fallFaculty * this.state.facultyCampusFrequency\n                      + this.state.fallStaff * this.state.staffCampusFrequency\n                      + this.state.fallContractStaff * this.state.contractCampusFrequency\n                    ) / 100)\n                  }\n                  disabled=\"disabled\"\n                  required\n                />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">members</span>\n                </div>\n              </div>\n            </form>\n            <form className=\"form-inline\" style={{display: 'inline-block'}}>\n              <div style={{display: 'flex'}}>\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">every</span>\n                </div>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  value={this.state.highTestFrequency}\n                  onChange={e => {\n                    this.setState({\n                      highTestFrequency: e.target.value\n                    })\n                  }}\n                required/>\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">days</span>\n                </div>\n              </div>\n            </form>\n          </div>\n          <div>\n            <label>Medium-testing cohort</label>\n            <br/>\n            <form className=\"form-inline\" style={{display: 'inline-block'}}>\n              <div style={{display: 'flex'}}>\n                <input\n                  type=\"number\"\n                  lang=\"en\"\n                  className=\"form-control\"\n                  min=\"0\"\n                  value={\n                    Math.round((\n                      this.state.fallInPerson * (100 - this.state.studentCampusFrequency)\n                      + this.state.fallFaculty * (100 - this.state.facultyCampusFrequency)\n                      + this.state.fallStaff * (100 - this.state.staffCampusFrequency)\n                      + this.state.fallContractStaff * (100 - this.state.contractCampusFrequency)\n                    ) / 100)\n                  }\n                  disabled=\"disabled\"\n                  required\n                />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">members</span>\n                </div>\n              </div>\n            </form>\n            <form className=\"form-inline\" style={{display: 'inline-block'}}>\n              <div style={{display: 'flex'}}>\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">every</span>\n                </div>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  min=\"0\"\n                  step=\".01\"\n                  value={this.state.mediumTestFrequency}\n                  onChange={e => {\n                    this.setState({\n                      mediumTestFrequency: e.target.value\n                    })\n                  }}\n                required/>\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">days</span>\n                </div>\n              </div>\n            </form>\n          </div>\n          <hr/>\n          <div style={{width:\"60%\", display:\"flex\", justifyContent: \"space-between\"}}>\n            Cost per test\n            <form className=\"form-inline\" style={{display: 'inline-block'}}>\n              <div style={{display: 'flex'}}>\n                <input\n                  type=\"number\"\n                  lang=\"en\"\n                  className=\"form-control\"\n                  min=\"0\"\n                  step=\".01\"\n                  value={this.state.costPerTest}\n                  onChange={e => {\n                    this.setState({\n                      costPerTest: e.target.value * 1\n                    })\n                  }}\n                  required\n                />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">dollars</span>\n                </div>\n              </div>\n            </form>\n          </div>\n          <div style={{width:\"60%\", display:\"flex\", justifyContent: \"space-between\"}}>\n            Semester length\n            <form className=\"form-inline\" style={{display: 'inline-block'}}>\n              <div style={{display: 'flex'}}>\n                <input\n                  type=\"number\"\n                  lang=\"en\"\n                  min=\"0\"\n                  className=\"form-control\"\n                  value={this.state.semesterLength}\n                  onChange={e => {\n                    this.setState({\n                      semesterLength: e.target.value * 1\n                    })\n                  }}\n                  required\n                />\n                <div className=\"input-group-append\">\n                  <span className=\"input-group-text\">days</span>\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n\n        <div style={{background: '#eee', textAlign: 'center', paddingTop: \"10px\", paddingBottom: \"15px\"}}>\n          {this.state.reveal\n            ? <div style={{marginLeft:\"15%\", marginRight: \"15%\"}}>\n              <h4>Outcomes</h4>\n              <div style={{color: 'red'}}>\n                {[\"semesterLength\", \"highTestFrequency\", \"costPerTest\", \"mediumTestFrequency\", \"fallStaff\", \"fallFaculty\", \"fallStudents\", \"fallInPerson\"].map((key) => {\n                  return (this.state[key] * 1) ? null : \"Non-numeric value for: \" + key;\n                })}\n              </div>\n              <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                Cost per person for semester (high-testing group)\n                <strong>$\n                {(this.state.costPerTest\n                    * this.state.semesterLength / this.state.highTestFrequency\n                ).toFixed(2)}\n                </strong>\n              </div>\n              <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                Cost per person for semester (medium-testing group)\n                <strong>$\n                {(this.state.costPerTest\n                    * this.state.semesterLength / this.state.mediumTestFrequency\n                ).toFixed(2)}</strong>\n              </div>\n              <div style={{display: 'flex', justifyContent: 'space-between', fontSize: '85%'}}>\n                Total cost\n                <strong>$\n                {Math.round(this.state.costPerTest * this.state.semesterLength / 100 * (\n\n                  ((this.state.fallInPerson * (100 - this.state.studentCampusFrequency)\n                  + this.state.fallFaculty * (100 - this.state.facultyCampusFrequency)\n                  + this.state.fallStaff * (100 - this.state.staffCampusFrequency)\n                  + this.state.fallContractStaff * (100 - this.state.contractCampusFrequency))\n                  / this.state.mediumTestFrequency)\n\n                  +\n\n                  ((this.state.fallInPerson * this.state.studentCampusFrequency\n                  + this.state.fallFaculty * this.state.facultyCampusFrequency\n                  + this.state.fallStaff * this.state.staffCampusFrequency\n                  + this.state.fallContractStaff * this.state.contractCampusFrequency)\n                  / this.state.highTestFrequency)\n                )).toLocaleString()}</strong>\n              </div>\n          </div>\n          : <button className=\"btn btn-large btn-info\" onClick={e => this.setState({ reveal: true })}>Estimate Costs</button>\n        }\n        </div>\n        <br/>\n        <br/>\n      </div>\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}